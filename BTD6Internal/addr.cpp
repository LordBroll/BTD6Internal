#include "addr.h"
#include <Psapi.h>

#include "debug.h"

DWORD64 addr::assembly_base = 0;
DWORD64 addr::assembly_size = 0;

DWORD64 addr::simulation_simulate = 0;
DWORD64 addr::simulation_set_cash = 0;
DWORD64 addr::simulation_get_cash = 0;
DWORD64 addr::simulation_add_xp = 0;

DWORD64 addr::konfuse_write = 0;
DWORD64 addr::konfuse_read = 0;

DWORD64 addr::player_ctor = 0;

DWORD64 addr::player_get_tower_xp = 0;
DWORD64 addr::player_add_tower_xp = 0;
DWORD64 addr::player_gain_monkey_money = 0;
DWORD64 addr::player_get_monkey_money = 0;

DWORD64 addr::constants_get_aes = 0;

DWORD64 addr::map_can_place = 0;

#define add_sig(name, code) name = code; dbg::log("[+] addr::%s = %p", #name, name);

void addr::init() {
	// init
	HMODULE mod = GetModuleHandleA("GameAssembly.dll");

	if (mod == nullptr) {
		dbg::fail("[-] error: failed to find wanted module");
		return;
	}

	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)mod;
	PIMAGE_NT_HEADERS nt_header = (PIMAGE_NT_HEADERS)(((ULONG_PTR)mod) + dos_header->e_lfanew);

	assembly_base = (DWORD64)(mod + nt_header->OptionalHeader.BaseOfCode);
	assembly_size = nt_header->OptionalHeader.SizeOfCode;
	
	dbg::log("[+] assembly base = %p, assembly size = %p", assembly_base, assembly_size);
	
	// simulation is the main "in game" object
	add_sig(simulation_simulate, abs_sig("\xE8\x00\x00\x00\x00\x80\xBB\x00\x00\x00\x00\x00\x74\x06", "x????xx?????xx", 1, 4));
	add_sig(simulation_get_cash, abs_sig("\xE8\x00\x00\x00\x00\x0F\x5A\xCE", "x????xxx", 1, 4));
	add_sig(simulation_set_cash, sig("\x40\x53\x48\x83\xEC\x30\x41\x8B\xD0", "xxxxxxxxx"));
	add_sig(simulation_add_xp, sig("\xF3\x0F\x11\x4C\x24\x00\x48\x89\x4C\x24\x00\x55\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x81\xEC\x00\x00\x00\x00\x48\x8D\x6C\x24\x00\x48\x89\x9D\x00\x00\x00\x00\x0F\x29\xB5\x00\x00\x00\x00\x0F\x29\xBD\x00\x00\x00\x00\x0F\x28\xF9", "xxxxx?xxxx?xxxxxxxxxxxxxx????xxxx?xxx????xxx????xxx????xxx"));

	// konfuse is the anti cheat engine thing they use
	add_sig(konfuse_write, abs_sig("\xE8\x00\x00\x00\x00\x66\x0F\x2F\x35\x00\x00\x00\x00", "x????xxx", 1, 4));
	add_sig(konfuse_read, abs_sig("\xE8\x00\x00\x00\x00\xF2\x0F\x5A\xC0\x48\x83\xC4\x28", "x????xxxxxxxx", 1, 4));

	// player class
	add_sig(player_ctor, sig("\x48\x89\x5C\x24\x00\x57\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x48\x8B\xF9\x75\x12\x8B\x0D\x00\x00\x00\x00\xE8\x00\x00\x00\x00\xC6\x05\x00\x00\x00\x00\x00\x48\x8B\x15\x00\x00\x00\x00\x48\x8B\xCF\xE8\x00\x00\x00\x00\x48\x8B\x05\x00\x00\x00\x00", "xxxx?xxxxxxx?????xxxxxxx????x????xx?????xxx????xxxx????xxx????"));
	add_sig(player_get_tower_xp, abs_sig("\xE8\x00\x00\x00\x00\xF3\x44\x0F\x2C\xC0", "x????xxxxx", 1, 4));
	add_sig(player_add_tower_xp, abs_sig("\xE8\x00\x00\x00\x00\x84\xC0\x75\x9F\x4D\x85\xFF", "x????xxxxxxx", 1, 4));
	add_sig(player_gain_monkey_money, abs_sig("\xE8\x00\x00\x00\x00\xFF\xC6\x41\x3B\xF7\x0F\x8C\x00\x00\x00\x00\x4C\x8B\x7C\x24\x00", "x????xxxxxxx????xxxx?", 1, 4));
	add_sig(player_get_monkey_money, abs_sig("\xE8\x00\x00\x00\x00\x66\x0F\x6E\xCE\x0F\x5B\xC9", "x????xxxxxxx", 1, 4));

	// map class
	add_sig(map_can_place, abs_sig("\xE8\x00\x00\x00\x00\x84\xC0\x75\x9F\x4D\x85\xFF", "x????xxxxxxx", 1, 4));
	
	/*
	sigs i used for debugging

	add_sig(map_can_place, sig("\x89\x54\x24\x10\x53\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x48\x8B\xD9\x75\x16\x8B\x0D\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x8B\x54\x24\x38\xC6\x05\x00\x00\x00\x00\x00\x48\x8B\x43\x10", "xxxxxxxxxxx?????xxxxxxx????x????xxxxxx?????xxxx"));

	
	add_sig(player_rankup, abs_sig("\xE8\x00\x00\x00\x00\x48\x8B\x05\x00\x00\x00\x00\x48\x8B\x88\x00\x00\x00\x00\x48\x8B\x09\x48\x85\xC9\x74\x38", "x????xxx????xxx????xxxxxxxx", 1, 4));
	add_sig(player_add_tower_xp, abs_sig("\xE8\x00\x00\x00\x00\xFF\xC3\xE9\x00\x00\x00\x00\x41\xFF\xC6", "x????xxx????xxx", 1, 4));
		
	add_sig(map_can_place, sig("\x89\x54\x24\x10\x53\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x48\x8B\xD9\x75\x16\x8B\x0D\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x8B\x54\x24\x38\xC6\x05\x00\x00\x00\x00\x00\x48\x8B\x43\x10", "xxxxxxxxxxx?????xxxxxxx????x????xxxxxx?????xxxx"));

	add_sig(key_deriver_ctor, abs_sig("\xE8\x00\x00\x00\x00\x48\x85\xDB\x0F\x84\x00\x00\x00\x00\x33\xD2\x48\x8B\xCB\xE8\x00\x00\x00\x00\x4C\x8B\x0E", "x????xxxxx????xxxxxx????xxx", 1, 4));
	add_sig(key_deriver_getbytes, sig("\x40\x55\x56\x48\x83\xEC\x48\x80\x3D\x00\x00\x00\x00\x00\x8B\xF2", "xxxxxxxxx?????xx"))
	add_sig(constants_get_aes, abs_sig("\xE8\x00\x00\x00\x00\x4C\x8B\xF8\x48\x89\x45\x00\x49\x8B\x4D\x10", "x????xxxxxxxxxxx", 1, 4));

	add_sig(aes_create_enc, sig("\x48\x89\x5C\x24\x00\x48\x89\x74\x24\x00\x57\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x49\x8B\xF8\x48\x8B\xF2\x48\x8B\xD9\x75\x12\x8B\x0D\x00\x00\x00\x00\xE8\x00\x00\x00\x00\xC6\x05\x00\x00\x00\x00\x00\x48\x85\xF6\x74\x5C\x8B\x56\x18\x45\x33\xC0\xC1\xE2\x03\x48\x8B\xCB\xE8\x00\x00\x00\x00\x84\xC0\x0F\x84\x00\x00\x00\x00\x48\x85\xFF\x74\x0B\x8B\x47\x18\xC1\xE0\x03\x3B\x43\x10\x75\x66\x48\x8B\x4B\x48\x48\x85\xC9\x0F\x84\x00\x00\x00\x00\x48\x8B\x01\x4C\x8B\xC7\x48\x8B\xD6\x4C\x8B\x88\x00\x00\x00\x00\x48\x8B\x5C\x24\x00\x48\x8B\x74\x24\x00\x48\x83\xC4\x20\x5F\x48\xFF\xA0\xA0\x02\x00\x00", "xxxx?xxxx?xxxxxxx?????xxxxxxxxxxxxx????x????xx?????xxxxxxxxxxxxxxxxxx????xxxx????xxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx????xxxx?xxxx?xxxxxxxxxxxx"));
	add_sig(aes_create_dec, sig("\x48\x89\x5C\x24\x00\x48\x89\x74\x24\x00\x57\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x49\x8B\xF8\x48\x8B\xF2\x48\x8B\xD9\x75\x12\x8B\x0D\x00\x00\x00\x00\xE8\x00\x00\x00\x00\xC6\x05\x00\x00\x00\x00\x00\x48\x85\xF6\x74\x5C\x8B\x56\x18\x45\x33\xC0\xC1\xE2\x03\x48\x8B\xCB\xE8\x00\x00\x00\x00\x84\xC0\x0F\x84\x00\x00\x00\x00\x48\x85\xFF\x74\x0B\x8B\x47\x18\xC1\xE0\x03\x3B\x43\x10\x75\x66\x48\x8B\x4B\x48\x48\x85\xC9\x0F\x84\x00\x00\x00\x00\x48\x8B\x01\x4C\x8B\xC7\x48\x8B\xD6\x4C\x8B\x88\x00\x00\x00\x00\x48\x8B\x5C\x24\x00\x48\x8B\x74\x24\x00\x48\x83\xC4\x20\x5F\x48\xFF\xA0\xC0\x02\x00\x00", "xxxx?xxxx?xxxxxxx?????xxxxxxxxxxxxx????x????xx?????xxxxxxxxxxxxxxxxxx????xxxx????xxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx????xxxx?xxxx?xxxxxxxxxxxx"));

	add_sig(aes_get_key, sig("\x48\x83\xEC\x28\x48\x8B\x49\x48\x48\x85\xC9\x74\x15\x48\x8B\x01\x48\x8B\x90\x00\x00\x00\x00\x48\x83\xC4\x28\x48\xFF\xA0\xF0\x01\x00\x00\xE8\x00\x00\x00\x00", "xxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx????"));
	add_sig(aes_get_iv, sig("\x48\x83\xEC\x28\x48\x8B\x49\x48\x48\x85\xC9\x74\x15\x48\x8B\x01\x48\x8B\x90\x00\x00\x00\x00\x48\x83\xC4\x28\x48\xFF\xA0\xD0\x01\x00\x00\xE8\x00\x00\x00\x00", "xxxxxxxxxxxxxxxxxxx????xxxxxxxxxxxx????"));
	*/
}

DWORD64 addr::sig(const char* bytes, const char* mask) {
	int current_search_index = 0;
	DWORD64 pattern_start = 0;
	const int pattern_size = strlen(mask);
	const char* assembly_data = (const char*)assembly_base;
	
	for(DWORD64 i = 0; i < assembly_size; i++) {
		if(mask[current_search_index] == '?' || bytes[current_search_index] == assembly_data[i]) {
			current_search_index++;

			if(current_search_index >= pattern_size) {
				return assembly_base + pattern_start;
			}
		} else {
			current_search_index = 0;
			pattern_start = i + 1;
		}
	}

	return 0;
}

DWORD64 addr::abs_sig(const char* bytes, const char* mask, int loc_offset, int final_offset) {
	DWORD64 location = addr::sig(bytes, mask);

	if(location == 0) {
		dbg::fail("invalid location sig");
	}

	location += loc_offset;
	
	return location + *(int*)location + final_offset;
}
